buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.standardout:bnd-platform:1.4.0'
        classpath "net.saliman:gradle-properties-plugin:1.4.5"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1+"
    }
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'org.standardout.bnd-platform'
apply plugin: 'net.saliman.properties'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'



///////////////////////////////////////////////////////////////// CONFIGURATION
javadoc{
	exclude '**/eu/project/ttc/types/**'
	options {
		failOnError = false
		encoding "UTF-8"
		docEncoding "UTF-8"
		charSet "UTF-8"
	}
}

// Remove javadoc warnings
tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
}

////////////////////////////////////////////////////////////////// TASKS

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}


//////////////////////////////////////////////////////////////////
// JCASGEN
// Author: Damien Raude-Morvan
//
// Generate UIMA type system
//////////////////////////////////////////////////////////////////
configurations {
	prepare.extendsFrom(compile)
}

task jcasgen(type: JavaExec) {
	description = 'Generate UIMA TS classes'
	ext.srcFile = file("$projectDir/src/main/resources/TermSuite_TS.xml")
	ext.outputDir = file("$projectDir/src/main/java")
	inputs.file srcFile
	outputs.dir outputDir
	classpath configurations.prepare
	// This ensures availability of type system imports
	// however, assumes that files are in desc subfolder
	systemProperty 'uima.datapath', "$projectDir/desc"
	main = 'org.apache.uima.tools.jcasgen.Jg'
	args = ['-jcasgeninput', srcFile, '-jcasgenoutput', outputDir]
}

// forces jcasgen before java compiles
classes.dependsOn jcasgen
updateSiteZip.dependsOn clean, jar

// UIMA type system is needed for Java compile
compileJava.source jcasgen.outputs, sourceSets.main.java


// Produces OSGi bundles and P2 update site 
platform {
    fetchSources = false
   	eclipseHome = new File(getProperty("user.eclipse.home"))
    bundle(project) {
        bnd {
	        symbolicName = getProperty("osgi.symbolicName")
	        bundleName = getProperty("osgi.bundleName")
	        version = getProperty("osgi.version")
	        addQualifier = getProperty("osgi.addQualifier")
	        
	        instruction "Import-Package", ""
	        instruction "Export-Package", "eu.project.ttc.*,org.apache.uima.examples"
        }
    }
}

artifacts {
	archives javadocJar, sourcesJar
}

if(hasProperty("signing.keyId")) {
	// activate signing of artifacts, only if signing is configured properly
	signing {
		sign configurations.archives
	}
}

repositories {
	mavenLocal()
	mavenCentral()
	
	// The Oracle Maven repo for BerkeleyDB
//	maven {
//		url "http://download.oracle.com/maven"
//	}
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId getProperty("group")
			artifactId getProperty("name")
			version getProperty("version")

			from components.java
		}
	}
}

if(hasProperty("ossrh.username")) {
  uploadArchives {
  	repositories {
  	  mavenDeployer {
    		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      		repository(url: getProperty("oss.repository.release")) {
      		  authentication(userName: getProperty("ossrh.username"), password: getProperty("ossrh.password"))
      		}
      		snapshotRepository(url: getProperty("oss.repository.snapshot")) {
      		  authentication(userName: getProperty("ossrh.username"), password: getProperty("ossrh.password"))
      		}

      		pom.project {
      		  name getProperty("name")
      		  packaging 'jar'
      		  // optionally artifactId can be defined here
      		  description getProperty("description")
      		  url getProperty("url")

      		  scm {
      			  connection "scm:git:" + getProperty("termsuite.git.url")
      			  developerConnection "scm:git:" + getProperty("termsuite.git.url")
      			  url getProperty("termsuite.git.url")
      		  }

      		  licenses {
      			  license {
      				  name getProperty("license")
      				  url getProperty("licenseUrl")
      			  }
      		  }

      		  developers {
      			  developer {
      				  id getProperty("developer.id")
      				  name getProperty("developer.name")
      				  email getProperty("developer.email")
      			  }
      		  }
      		}
	     }
  	}
  }
} else {
  def msg = "Publishing to maven central (task uploadArchives) is not possible since no gradle property file is found (use \"\$ cp gradle.properties.sample gradle.properties\" and edit gradle.properties)"
  logger.warn(msg)
}


dependencies {
	// Test
	testCompile "junit:junit:4.12"
	testCompile "eu.codearte.catch-exception:catch-exception:1.4.4"
	testCompile "org.assertj:assertj-core:2.0.0"
	testCompile "org.mockito:mockito-core:1.10.19"

	// Configure logging at runtime
	compile "ch.qos.logback:logback-classic:1.1.7"

	// Json
	compile "com.fasterxml.jackson.core:jackson-databind:2.8.2"

	// UIMA
	/*
	 * Warning: upgrading to uimafit-core:2.2.0 and uimaj-core:2.9.0
	 * causes a ConcurrentModificationException in Lexer
	 */
	compile "org.apache.uima:uimaj-core:2.6.0"
	compile "org.apache.uima:uimafit-core:2.1.0"


	// Apache Common
	compile "org.apache.commons:commons-lang3:3.4"
	compile "commons-cli:commons-cli:1.2"
	compile "commons-io:commons-io:1.3.2"

	// Mate Tagger
	compile "com.googlecode.mate-tools:anna:3.5"

	// Groovy
	compile "org.codehaus.groovy:groovy:2.4.4"

	// Guava
	compile "com.google.guava:guava:19.0"
	
	compile "org.mongodb:mongo-java-driver:3.2.2"
			
	// Snake YAML
	compile "org.yaml:snakeyaml:1.15"

	// Jackson (json)
	compile "com.fasterxml.jackson.core:jackson-core:2.5.4"

	// UIMA Components
	compile 'fr.univ-nantes.julestar:uima-tree-tagger-wrapper:1.1'
	compile 'fr.univ-nantes.julestar:uima-tokenizer:1.1'
	compile 'fr.univ-nantes.julestar:uima-filter:1.1'
	compile 'fr.univ-nantes.julestar:uima-mapper:1.1'
	compile 'fr.univ-nantes.julestar:uima-chinese-segmenter:1.1'
	compile 'fr.univ-nantes.julestar:uima-tokens-regex:1.2'
	compile 'fr.univ-nantes.julestar:uima-stemmer:1.1'
	compile 'fr.univ-nantes.julestar:uima-toolbox:1.0'
	
	// JCas type generation
	prepare "org.apache.uima:uimaj-tools:2.8.1"
}


test {
	/*
	 *  explicitly exclude functional tests from default gradle build
	 */
	exclude 'eu/project/ttc/test/func/**'
}

/*
 * Launches unit tests manually
 */
task unitTest( type: Test ) {
	exclude 'eu/project/ttc/test/func/**'
}

/*
 * Launches cucumber tests manually
 */
task cucumberTest( type: Test ) {
	/*
	 *  explicitly runs functional tests
	 */
	include 'eu/project/ttc/test/func/**'
	exclude 'eu/project/ttc/test/unit/**'
}

/*
 * Enforces the run of cucumber tests before uploading archives
 */
//uploadArchives.dependsOn cucumberTest

////////////////////////////////////////////////////////////// SPECIFIC TASKS

jar {
	// make it fat
    dependsOn configurations.runtime
	from( configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } ) {
		 exclude "META-INF/*"
    }
	
	exclude "**/lv/**"
	exclude "**/zh/**"
 	exclude "**/da/**"

    // cannot exclude META-INF for groovy to run
	from( configurations.runtime.findAll{it.getAbsolutePath().contains("org.codehaus.groovy")}.collect { it.isDirectory() ? it : zipTree(it) } ) {
		include "META-INF/*"
	}

	// tune manifest
    manifest {
        attributes(
			"Implementation-Title": getProperty("name"),
			"Implementation-Version": getProperty("version"),
            "Built-By": System.getProperty('user.name'),
            "Built-Date": new Date(),
            "Built-JDK": System.getProperty('java.version'),
			"Main-Class": "eu.project.ttc.tools.TermSuite")
    }
}

clean.doLast {
    project.delete (fileTree(dir: 'sources/eu/project/ttc/types'))
    project.delete (fileTree(dir: 'sources/org')) // org.apache.uima.examples
    println 'Cleaning typesystem generated sources.'
}

/*
 * Upload to bintray. 
 */
bintray {
	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
	publish = true
	override = true
	filesSpec {
		from 'build/updatesite/'
		into '.'
	}
	pkg {
		repo = getProperty("termsuite.p2repo.name")
		name = getProperty("termsuite.p2repo.pkgname")
		desc = getProperty("termsuite.p2repo.description")
        userOrg = getProperty("termsuite.bintray.org")
        licenses = [getProperty("license")]
		vcsUrl = getProperty("termsuite.git.url")
		labels = getProperty("termsuite.p2repo.tags").split(",")
		publicDownloadNumbers = false
	}
}
//bintrayUpload.dependsOn updateSiteZip
 